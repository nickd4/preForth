\ seedForth - seed it, feed it, grow it - i386 (32 bit) ITC flavour   uho 2018-04-13
\ ----------------------------------------------------------------------------------
\
\  - registers:
\      EAX, EDX  general purpose
\      ESI  instruction pointer
\      EBP  return stack pointer
\      ESP  data stack pointer

pre
;;; This is seedForth - a small,potentially interactive Forth, that dynamically
;;; bootstraps from a minimal kernel.
;;;
;;;    cat seedForth.seed - | ./seedForth
;;;
;;; .seed-files are in byte-tokenized source code format.
;;;
;;; Use the seedForth tokenizer to convert human readable source code to byte-token form.

format ELF

section '.bss' executable writeable

	dd	10000 dup(0)
stck:	dd	16 dup(0)

	dd	10000 dup(0)
rstck:	dd	16 dup(0)

_dp:	dd	_start  ; dictionary pointer: points to	next free location in memory
        ; free memory starts at _start

__hp:	dd	0       ; head pointer: index of first unused head
_head:	dd	10000 dup (0)

section '.text' executable writeable align 4096

public main
extrn putchar
extrn getchar
extrn fflush
extrn exit
extrn mprotect
extrn ioctl
extrn usleep

macro next  {
	lodsd
	jmp	dword [eax]
}

origin:

main:	cld
	mov	esp,dword stck
	mov	ebp,dword rstck

	; make section writeable
	push	ebp
	mov	ebp,esp
	sub	esp,16
	and	esp,0xfffffff0
	mov	dword [esp+8],7  ; rwx
	mov	eax,_memtop
	sub	eax,origin
	mov	dword [esp+4],eax
	mov	dword [esp],origin
	call	mprotect
	mov	esp,ebp
	pop	ebp
	or	eax,eax     ; error?
	jz	main0
	push	ebp
	mov	ebp,esp
	push	eax
	and	esp,0xfffffff0
	;call	__error    ; get error code on Mac OS
	;mov	eax,[eax]
	;call	__errno_location ; get error on Linux
	;mov	eax,[eax]
	mov	[esp],eax
	call	exit

main0:	mov	esi,main1
	next

main1:	dd	_cold
	dd	_bye

_nest:
_enter:	lea	ebp,[ebp-4]
	mov	[ebp],esi
	lea	esi,[eax+4]
	next

_dodoes: ; ( -- addr )
	lea	ebp,[ebp-4]  ;	push	IP
	mov	[ebp],esi
	mov	esi,[eax-4]   ; set IP
_dovar: ; ( -- addr )
	lea	eax,[eax+4] ; to parameter field
	push	eax
	next
;

code bye ( -- )
	push	ebp
	mov	ebp,esp
	and	esp,0xfffffff0
	mov	eax,0
	mov	[esp],eax
	call	exit
;

code emit ( c -- )
	pop	eax

	push	ebp
	mov	ebp,esp
	push	eax
	and	esp,0xfffffff0

	mov	dword [esp],eax
	call	putchar

	mov	eax,0
	mov	[esp],eax
	call	fflush   ; flush all output streams

	mov	esp,ebp
	pop	ebp
	next
;

code key ( -- c )
	push	ebp
	mov	ebp,esp
	and	esp,0xfffffff0

	call	getchar
	mov	esp,ebp
	pop	ebp
	cmp	eax,-1
	jnz	key1
	mov	eax,4   ; eof: return Ctrl-D
key1:	push	eax
	next
;

code key? ( -- f )
	push	ebp
	mov	ebp,esp
	and	esp,0xfffffff0
	sub	esp,32

	mov	dword [esp],0
	mov	dword [esp+4],1074030207 ; FIONREAD
	lea	dword eax,[esp+24]
	mov	dword [esp+8],eax

	call	ioctl
	mov	dword eax,[esp+24]

	mov	esp,ebp
	pop	ebp

	cmp	eax,0
	jz	keyq1
	mov	eax,-1
keyq1:	push	eax
	next
;

code dup ( x -- x x )
	pop	eax
	push	eax
	push	eax
	next
;

code swap ( x y -- y x )
	pop	edx
	pop	eax
	push	edx
	push	eax
	next
;

code drop ( x -- )
	pop	eax
	next
;

code 0< ( x -- flag )
	pop	eax
	sar	eax,31
	push	eax
	next
;

code ?exit ( f -- ) \  high level:  IF exit THEN
	pop	eax
	or	eax,eax
	jz	qexit1
	mov	esi,[ebp]
	lea	ebp,[ebp+4]
qexit1:	next
;

code >r ( x -- ) ( R -- x )
	pop	ebx
	lea	ebp,[ebp-4]
	mov	[ebp],ebx
	next
;

code r> ( R x -- ) ( -- x )
	mov	eax,[ebp]
	lea	ebp,[ebp+4]
	push	eax
	next
;

code - ( x1 x2 -- x3 )
	pop	edx
	pop	eax
	sub	eax,edx
	push	eax
	next
;

code	or	( x1 x2 -- x3 )
	pop	edx
	pop	eax
	or	eax,edx
	push	eax
	next
;

code	and	( x1 x2 -- x3 )
	pop	edx
	pop	eax
	and	eax,edx
	push	eax
	next
;

pre
_unnest:
;
code exit ( -- )
	mov	esi,[ebp]
	lea	ebp,[ebp+4]
	next
;

code lit ( -- )
	lodsd
	push	eax
	next
;

code @ ( addr -- x )
	pop	eax
	mov	eax,[eax]
	push	eax
	next
;

code c@ ( c-addr -- c )
	pop	edx
        xor	eax,eax
	mov	al,byte [edx]
	push	eax
	next
;

code ! ( x addr -- )
	pop	edx
	pop	eax
	mov	dword [edx],eax
	next
;

code c! ( c c-addr -- )
	pop	edx
	pop	eax
	mov	byte [edx],al
	next
;

\ code invoke ( addr -- ) \ native code: >r ;
code execute ( addr -- ) \ this version uses token numbers as execution tokens	and	finds their code address via the headers table
	pop	edx
	mov	dword eax,[_head+edx*4]
	jmp	dword [eax]
;

code branch ( -- )  \ threaded code: r>  @ >r ;
	lodsd
	mov	esi,eax
	next
;

code ?branch ( f -- ) \ threaded code:  ?exit r> @ >r ;
	pop	eax
	or	eax,eax
	jz	_branchX
	lea	esi,[esi+4]
	next
;

code depth ( -- n )
	mov	eax,stck
	sub	eax,esp
	sar	eax,2
	push	eax
	next
;

code sp@ ( -- x )
	push	esp
	next
;

code sp! ( x -- )
	pop	esp
	next
;

code rp@ ( -- x )
	push	ebp
	next
;

code rp! ( x -- )
	pop	ebp
	next
;

code um* ( u1 u2 -- ud )
	pop	edx
	pop	eax
	mul	edx
	push	eax
	push	edx
	next
;

code um/mod ( ud u1 -- u2 u3 )
	pop	ebx
	pop	edx
	pop	eax
	div	ebx
	push	edx
	push	eax
	next
;

code usleep ( c -- )
	pop	eax

	push	ebp
	mov	ebp,esp
	push	eax
	and	esp,0xfffffff0

	mov	dword [esp],eax
	call	usleep

	mov	esp,ebp
	pop	ebp
	next
;


: negate ( n1 -- n2 )
   0 swap - ;

: + ( x1 x2 -- x3 )
   negate - ;

: 0= ( x -- flag )
   0 swap ?exit drop -1 ;

: ?dup ( x -- x x | 0 )
   dup 0= ?exit dup ;

: 2* ( x1 -- x2 )
   dup + ;

: cells ( x1 -- x2 )
   2* 2* ;

: +! ( x addr -- )
   swap >r  dup @ r> +  swap ! ;

: hp ( -- addr )
   lit _hp ;

: h@ ( i -- addr )
   cells lit head + @ ;

: h! ( x i -- )
   cells lit head + ! ;

: h, ( x -- )
   hp @  h!   1 hp +! ;

: here ( -- addr )
   lit dp @ ;

: allot ( n -- )
   lit dp +! ;

: , ( x -- )
   here   1 cells allot  ! ;

: c, ( c -- )
   here   1 allot c! ;

: compile, ( x -- )
   h@ , ;

\ token are in the range 0 .. 767:
\   0, 3 .. 255 are single byte tokens
\    256 .. 511 are double byte tokens of the form 01 xx
\    511 .. 767 are double byte tokens of the form 02 xx
: token ( -- x )
   key dup 0= ?exit    \       0 -> single byte token
   dup 3 - 0< 0= ?exit \ not 1 2 -> single byte token
   key couple ;        \            double byte token

: interpreter ( -- )
   token execute   tail interpreter ;  \ executing exit  will leave this loop

: num ( -- x )
   tail interpreter ;

: ?lit ( xt -- xt | )
   dup h@ lit num - ?exit drop   \ not num token: exit i.e. normal compile action
   lit lit ,   num ,             \ generate  lit x   num call puts x on stack
   r> drop   tail compiler ;

: compiler ( -- )
   token ?dup 0= ?exit  ?lit
   compile, tail compiler ;

: new ( -- xt )
   hp @   here h,  lit enter , ;

: fun ( -- )
   new drop  compiler ;

: couple ( hi lo -- hilo )
    >r  2* 2* 2* 2*   2* 2* 2* 2*   r> + ;

: $lit ( -- addr u )
    r>  dup   1 +   dup >r  swap c@  dup r> + >r ;

: create ( -- xt )
   0 , \ dummy does> field
   hp @  here h, lit dovar , ;

: does> ( xt -- ) \ set code field of last defined word
    r>   swap h@  dup >r 1 cells - !   lit dodoes r> !
;

: unused ( -- u )
    lit memtop  here - ;

: cold ( -- )
   \ 's' emit 'e' dup emit emit  'd' emit 10 emit
   lit bye         h, \ 0   00  code
   0               h, \ 1   01  prefix
   0               h, \ 2   02  prefix
   lit emit        h, \ 3   03  code
   lit key         h, \ 4   04  code
   lit dup         h, \ 5   05  code
   lit swap        h, \ 6   06  code
   lit drop        h, \ 7   07  code
   lit 0<          h, \ 8   08  code
   lit ?exit       h, \ 9   09  code
   lit >r          h, \ 10  0A  code
   lit r>          h, \ 11  0B  code
   lit -           h, \ 12  0C  code
   lit exit        h, \ 13  0D  code
   lit lit         h, \ 14  0E  code
   lit @           h, \ 15  0F  code
   lit c@          h, \ 16  10  code
   lit !           h, \ 17  11  code
   lit c!          h, \ 18  12  code
   lit execute     h, \ 19  13  code
   lit branch      h, \ 20  14  code
   lit ?branch     h, \ 21  15  code
   lit negate      h, \ 22  16
   lit +           h, \ 23  17
   lit 0=          h, \ 24  18
   lit ?dup        h, \ 25  19
   lit cells       h, \ 26  1A
   lit +!          h, \ 27  1B
   lit h@          h, \ 28  1C
   lit h,          h, \ 29  1D
   lit here        h, \ 30  1E
   lit allot       h, \ 31  1F
   lit ,           h, \ 32  20
   lit c,          h, \ 33  21
   lit fun         h, \ 34  22
   lit interpreter h, \ 35  23
   lit compiler    h, \ 36  24
   lit create      h, \ 37  25
   lit does>       h, \ 38  26
   lit cold        h, \ 39  27
   lit depth       h, \ 40  28  code
   lit compile,    h, \ 41  29
   lit new         h, \ 42  2A
   lit couple      h, \ 43  2B
   lit and         h, \ 44  2C  code
   lit or          h, \ 45  2D  code
   lit sp@         h, \ 46  2E  code
   lit sp!         h, \ 47  2F  code
   lit rp@         h, \ 48  30  code
   lit rp!         h, \ 49  31  code
   lit $lit        h, \ 50  32
   lit num         h, \ 51  33
   lit um*         h, \ 52  34  code
   lit um/mod      h, \ 53  35  code
   lit unused      h, \ 54  36
   lit key?        h, \ 55  37
   lit token       h, \ 56  38
   lit usleep      h, \ 57  39  code
   lit hp          h, \ 58  40
   interpreter bye ;

pre
_start:	db	43
	dd	100000 dup (0)
_memtop:
	dd	0
;
